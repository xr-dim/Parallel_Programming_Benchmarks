1 non-host device has a unique device number that is greater than or equal to zero and less than the
2 device number for the host device. Additionally, the constant omp_initial_device can be
3 used as an alias for the host device and the constant omp_invalid_device can be used to
4 specify an invalid device number. A conforming device number is either a non-negative integer that
5 is less than or equal to omp_get_num_devices() or equal to omp_initial_device or
6 omp_invalid_device.
7 When a target construct is encountered, a new target task is generated. The target task region
8 encloses the target region. The target task is complete after the execution of the target region
9 is complete.
10 When a target task executes, the enclosed target region is executed by an initial thread. The
11 initial thread executes sequentially, as if the target region is part of an initial task region that is
12 generated by an implicit parallel region. The initial thread may execute on the requested target
13 device, if it is available and supported. If the target device does not exist or the implementation
14 does not support it, all target regions associated with that device execute on the host device.
15 The implementation must ensure that the target region executes as if it were executed in the data
16 environment of the target device unless an if clause is present and the if clause expression
17 evaluates to false.
18 The teams construct creates a league of teams, where each team is an initial team that comprises
19 an initial thread that executes the teams region. Each initial thread executes sequentially, as if the
20 code encountered is part of an initial task region that is generated by an implicit parallel region
21 associated with each team. Whether the initial threads concurrently execute the teams region is
22 unspecified, and a program that relies on their concurrent execution for the purposes of
23 synchronization may deadlock.
24 If a construct creates a data environment, the data environment is created at the time the construct is
25 encountered. The description of a construct defines whether it creates a data environment.
26 When any thread encounters a parallel construct, the thread creates a team of itself and zero or
27 more additional threads and becomes the primary thread of the new team. A set of implicit tasks,
28 one per thread, is generated. The code for each task is defined by the code inside the parallel
29 construct. Each task is assigned to a different thread in the team and becomes tied; that is, it is
30 always executed by the thread to which it is initially assigned. The task region of the task being
31 executed by the encountering thread is suspended, and each member of the new team executes its
32 implicit task. An implicit barrier occurs at the end of the parallel region. Only the primary
33 thread resumes execution beyond the end of the parallel construct, resuming the task region
34 that was suspended upon encountering the parallel construct. Any number of parallel
35 constructs can be specified in a single program.
36 parallel regions may be arbitrarily nested inside each other. If nested parallelism is disabled, or
37 is not supported by the OpenMP implementation, then the new team that is created by a thread that
38 encounters a parallel construct inside a parallel region will consist only of the
39 encountering thread. However, if nested parallelism is supported and enabled, then the new team